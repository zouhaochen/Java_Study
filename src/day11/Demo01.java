package day11;

/*
进程：是一个正在执行中的程序
     每一个进程执行都有一个执行的顺序，该顺序就是一个执行路径
     或者叫一个控制单元

线程：是进程中一个独立的控制单元
     线程在控制着进程的执行

一个进程中至少有一个线程

Java虚拟机启动时会有一个进程java.exe
该进程中至少有一个线程负责java程序的执行
而且这个线程运行的代码存在于main方法中
该线程称之为主线程

扩展：更细节说明Java虚拟机JVM
     JVM启动不止一个线程，还有负责垃圾回收机制的线程
1. 如何在自定义一个代码中自定义一个线程？
通过对API的查找，Java已经提供了对线程这类事物的描述：thread类
创建线程的第一种方式：继承thread类
第一步：定义类继承Thread
第二步：复写Thread类中的run方法，目的：将自定义的代码存储在run方法中，让线程运行
第三步：调用线程的start方法，该方法有两个作用：启动线程；调用start方法

发现运行结果每一次都不同
因为多个线程都在获取cpu的执行权，cpu执行到谁，谁就运行
明确一点：在某一时刻，只能有一个程序在运行（多核除外）
cpu在做着快速的切换以达到看上去是在同时运行的效果

我们可以形象的把多线程的运行形容为在互相抢夺cpu的执行权
这就是多线程的一个特性：随机性，谁抢到谁执行，至于执行多长时间，cpu来决定

为什么要覆盖run方法？

Thread类用于描述线程
该类就定义了一个功能用于存储线程要运行的代码，该存储功能就是run方法
也就是说Thread类中的run方法用于存储线程要运行的代码



 */

class Demo extends Thread
{
    public void run()
    {
        System.out.println("demo run");
    }
}

public class Demo01
{
    public static void main(String[] args)
    {
        Demo d = new Demo();
        d.start();//开启线程并执行该线程的run方法
        /*
        d.run();//仅仅是对象调用方法，而线程创建了，并没有运行
         */
    }
}
